# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --cov-config=pyproject.toml"
python_files = ["tests.py", "test_*.py"]
norecursedirs = ["node_modules"]
filterwarnings = [
    "error",
    "ignore:SelectableGroups dict interface is deprecated::",
    "ignore:The DEFAULT_FILE_STORAGE setting is deprecated::",
    "ignore:django.core.files.storage.get_storage_class is deprecated::",
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::ResourceWarning",
]


# ==== Coverage ====
[tool.coverage.run]
source = ["fpbase", "proteins", "references", "fpseq", "favit"]
omit = ["*/migrations/*", "*/tests/*", "proteins/management/**"]
# plugins = ["django_coverage_plugin"]


# ==== black ====
[tool.black]
line-length = 119
target-version = ['py311']


# ==== ruff ====
[tool.ruff]
line-length = 119
target-version = "py311"
exclude = ['*/migrations/*', '*/static/CACHE/*', '.venv']
select = [
    "F",   # Pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "I",   # isort
    # "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "S",   # flake8-bandit
    "B",   # flake8-bugbear
    # "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    "DJ",  # flake8-django
    # "PTH", # flake8-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "S101", # Use of assert detected.
]
[tool.ruff.per-file-ignores]
"**/tests/*" = ["S"]
"references/admin.py" = ["S308"]
"config/settings/*" = ["F405"]

[tool.isort]
profile = "black"
line_length = 119
known_first_party = ["fpbase", "config"]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

[tool.djlint]
