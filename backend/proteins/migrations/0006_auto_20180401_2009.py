# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-04-01 20:09
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import proteins.models.spectrum


def move_spectra(apps, schema_editor):
    States = apps.get_model("proteins", "State")
    Spectrum = apps.get_model("proteins", "Spectrum")
    it = 'p'
    for state in States.objects.all():
        prot_name = state.protein.name
        if state.ex_spectrum:
            Spectrum.objects.create(
                data=state.ex_spectrum.data,
                owner_state=state,
                subtype='ex',
                category=it,
            )
        if state.em_spectrum:
            Spectrum.objects.create(
                data=state.em_spectrum.data,
                owner_state=state,
                subtype='em',
                category=it,
            )
        if state.twop_ex_spectrum:
            spectrum = Spectrum(
                data=state.twop_ex_spectrum.data,
                owner_state=state,
                subtype='2p',
                category=it,
            )
            spectrum.save()


def undo_move_spectra(apps, schema_editor):
    Spectrum = apps.get_model("proteins", "Spectrum")
    for spectrum in Spectrum.objects.all():
        if spectrum.subtype and spectrum.owner_state:
            if spectrum.subtype == 'ex':
                spectrum.owner_state.ex_spectra = spectrum.data
            elif spectrum.subtype == 'em':
                spectrum.owner_state.em_spectra = spectrum.data
            elif spectrum.subtype == '2p':
                spectrum.owner_state.twop_ex_spectra = spectrum.data


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('proteins', '0005_auto_20180328_1614'),
    ]

    operations = [
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('name', models.CharField(max_length=100))
            ],
        ),
        migrations.CreateModel(
            name='Dye',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(900)])),
                ('em_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)])),
                ('twop_ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(700), django.core.validators.MaxValueValidator(1600)], verbose_name='Peak 2P excitation')),
                ('ext_coeff', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300000)], verbose_name='Extinction Coefficient')),
                ('twop_peakGM', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Peak 2P cross-section of S0->S1 (GM)')),
                ('qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Quantum Yield')),
                ('twop_qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='2P Quantum Yield')),
                ('brightness', models.FloatField(blank=True, editable=False, null=True)),
                ('pka', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)], verbose_name='pKa')),
                ('lifetime', models.FloatField(blank=True, help_text='Lifetime (ns)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('name', models.CharField(max_length=100))
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('name', models.CharField(max_length=100))
            ],
        ),
        migrations.CreateModel(
            name='Light',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('name', models.CharField(max_length=100))
            ],
        ),
        migrations.CreateModel(
            name='Spectrum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('data', proteins.models.spectrum.SpectrumData(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(max_length=10), size=2), size=None)),
                ('category', models.CharField(blank=True, choices=[('d', 'Dye'), ('p', 'Protein'), ('l', 'Light Source'), ('f', 'Filter'), ('c', 'Camera')], db_index=True, max_length=1, verbose_name='Item Type')),
                ('subtype', models.CharField(choices=[('ex', 'excitation'), ('ab', 'absorption'), ('em', 'emission'), ('2p', 'two photon absorption'), ('bx', 'bandpass (excitation)'), ('bm', 'bandpass (emission)'), ('sp', 'shortpass'), ('lp', 'longpass'), ('bs', 'beamsplitter'), ('qe', 'Quantum Efficiency'), ('pd', 'Power Distribution')], db_index=True, max_length=2, verbose_name='Spectra Subtype')),
                ('ph', models.FloatField(blank=True, null=True, verbose_name='pH')),
                ('solvent', models.CharField(blank=True, max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spectrum_author', to=settings.AUTH_USER_MODEL)),
                ('owner_camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.Camera')),
                ('owner_dye', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.Dye')),
                ('owner_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.Filter')),
                ('owner_light', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.Light')),
                ('owner_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.State')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spectrum_modifier', to=settings.AUTH_USER_MODEL))
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=move_spectra,
            reverse_code=undo_move_spectra,
        ),
        migrations.RemoveField(
            model_name='state',
            name='em_spectra',
        ),
        migrations.RemoveField(
            model_name='state',
            name='ex_spectra',
        ),
        migrations.RemoveField(
            model_name='state',
            name='twop_ex_spectra',
        ),
    ]

