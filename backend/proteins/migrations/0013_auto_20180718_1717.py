# Generated by Django 2.0.6 on 2018-07-18 17:17

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import proteins.util.helpers


def resavestuff(apps, schema_editor):
    Filter = apps.get_model("proteins", "Filter")
    Light = apps.get_model("proteins", "Light")

    for f in Filter.objects.filter(
            name__icontains='ff0',
            spectrum__subtype='bs',
            manufacturer__icontains='semrock'):
        f.subtype = 'bp'
    for l in Light.objects.filter(manufacturer='lumencor'):
        l.manufacturer = 'Lumencor'
        l.save()
    for f in Filter.objects.filter(manufacturer='lumencor'):
        f.manufacturer = 'Lumencor'
        if f.part[:5].isdigit():
            f.part = f.part[:3] + '/' + f.part[3:]
        f.save()


def resavestuff_back(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('proteins', '0012_auto_20180708_1811'),
    ]

    operations = [
        migrations.CreateModel(
            name='FilterPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(choices=[('ex', 'Excitation Path'), ('em', 'Emission Path'), ('bs', 'Both Paths')], max_length=2, verbose_name='Ex/Em Path')),
                ('reflects', models.BooleanField(default=False, help_text='Filter reflects light at this position in the light path')),
            ],
        ),
        migrations.CreateModel(
            name='FluorophoreCollection',
            fields=[
                ('proteincollection_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='proteins.ProteinCollection')),
                ('dyes', models.ManyToManyField(blank=True, related_name='collection_memberships', to='proteins.Dye')),
            ],
            options={
                'abstract': False,
            },
            bases=('proteins.proteincollection',),
        ),
        migrations.CreateModel(
            name='Microscope',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('id', models.CharField(default=proteins.util.helpers.shortuuid, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('lasers', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1600)]), blank=True, default=list, size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OpticalConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('laser', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1600)])),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='camera',
            options={'ordering': ['name']},
        ),
        migrations.AlterModelOptions(
            name='filter',
            options={'ordering': ['bandcenter']},
        ),
        migrations.AlterModelOptions(
            name='light',
            options={'ordering': ['name']},
        ),
        migrations.AlterField(
            model_name='proteincollection',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proteincollections', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='spectrum',
            name='category',
            field=models.CharField(choices=[('d', 'Dye'), ('p', 'Protein'), ('l', 'Light Source'), ('f', 'Filter'), ('c', 'Camera')], db_index=True, max_length=1, verbose_name='Spectrum Type'),
        ),
        migrations.AlterField(
            model_name='spectrum',
            name='owner_camera',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.Camera'),
        ),
        migrations.AlterField(
            model_name='spectrum',
            name='owner_filter',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.Filter'),
        ),
        migrations.AlterField(
            model_name='spectrum',
            name='owner_light',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.Light'),
        ),
        migrations.AddField(
            model_name='opticalconfig',
            name='camera',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='optical_configs', to='proteins.Camera'),
        ),
        migrations.AddField(
            model_name='opticalconfig',
            name='filters',
            field=models.ManyToManyField(blank=True, related_name='optical_configs', through='proteins.FilterPlacement', to='proteins.Filter'),
        ),
        migrations.AddField(
            model_name='opticalconfig',
            name='light',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='optical_configs', to='proteins.Light'),
        ),
        migrations.AddField(
            model_name='opticalconfig',
            name='microscope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optical_configs', to='proteins.Microscope'),
        ),
        migrations.AddField(
            model_name='opticalconfig',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opticalconfigs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='microscope',
            name='bs_filters',
            field=models.ManyToManyField(blank=True, related_name='as_bs_filter', to='proteins.Filter'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='cameras',
            field=models.ManyToManyField(blank=True, related_name='microscopes', to='proteins.Camera'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='on_scope', to='proteins.ProteinCollection'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='em_filters',
            field=models.ManyToManyField(blank=True, related_name='as_em_filter', to='proteins.Filter'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='ex_filters',
            field=models.ManyToManyField(blank=True, related_name='as_ex_filter', to='proteins.Filter'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='fluors',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fluor_on_scope', to='proteins.FluorophoreCollection'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='lights',
            field=models.ManyToManyField(blank=True, related_name='microscopes', to='proteins.Light'),
        ),
        migrations.AddField(
            model_name='microscope',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='microscopes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='filterplacement',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proteins.OpticalConfig'),
        ),
        migrations.AddField(
            model_name='filterplacement',
            name='filter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proteins.Filter'),
        ),
        migrations.AlterUniqueTogether(
            name='opticalconfig',
            unique_together={('name', 'microscope')},
        ),
        migrations.RunPython(resavestuff, resavestuff_back),
    ]
