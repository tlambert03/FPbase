# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-13 01:08
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
from django.contrib.postgres.operations import TrigramExtension
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import proteins.fields
import proteins.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('references', '0001_initial'),
    ]

    operations = [
        TrigramExtension(),
        migrations.CreateModel(
            name='BleachMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('rate', models.FloatField(help_text='Photobleaching half-life (s)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='Bleach Rate')),
                ('power', models.FloatField(blank=True, help_text="If not reported, use '-1'", null=True, validators=[django.core.validators.MinValueValidator(-1)], verbose_name='Illumination Power')),
                ('units', models.CharField(blank=True, help_text='e.g. W/cm2', max_length=100, verbose_name='Power Unit')),
                ('light', models.CharField(blank=True, choices=[('a', 'Arc-lamp'), ('la', 'Laser'), ('le', 'LED'), ('o', 'Other')], max_length=2, verbose_name='Light Source')),
                ('modality', models.CharField(blank=True, choices=[('wf', 'Widefield'), ('ps', 'Point Scanning Confocal'), ('sd', 'Spinning Disc Confocal'), ('s', 'Spectrophotometer'), ('t', 'TIRF'), ('o', 'Other')], max_length=2, verbose_name='Imaging Modality')),
                ('temp', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('fusion', models.CharField(blank=True, help_text='(if applicable)', max_length=60, verbose_name='Fusion Protein')),
                ('in_cell', models.IntegerField(blank=True, choices=[(-1, 'Unkown'), (0, 'No'), (1, 'Yes')], default=-1, help_text='protein expressed in living cells', verbose_name='In cells?')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bleachmeasurement_author', to=settings.AUTH_USER_MODEL)),
                ('reference', models.ForeignKey(blank=True, help_text='Reference where the measurement was made', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bleach_measurements', to='references.Reference', verbose_name='Measurement Reference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FRETpair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('radius', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'FRET Pair',
            },
        ),
        migrations.CreateModel(
            name='Mutation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mutations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=None, validators=[django.core.validators.RegexValidator('^[ACDEFGHIKLMNPQRSTVWY-][1-9][0-9]{0,2}[ACDEFGHIKLMNPQRSTVWY]$', 'not a valid mutation code: eg S65T')])),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.PositiveIntegerField(help_text='NCBI Taxonomy ID', primary_key=True, serialize=False, verbose_name='Taxonomy ID')),
                ('scientific_name', models.CharField(blank=True, max_length=128)),
                ('division', models.CharField(blank=True, max_length=128)),
                ('common_name', models.CharField(blank=True, max_length=128)),
                ('species', models.CharField(blank=True, max_length=128)),
                ('genus', models.CharField(blank=True, max_length=128)),
                ('rank', models.CharField(blank=True, max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organism',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('approved', 'approved'), ('hidden', 'hidden')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Name of the fluorescent protein', max_length=128)),
                ('slug', models.SlugField(help_text='URL slug for the protein', max_length=64, unique=True)),
                ('base_name', models.CharField(max_length=128)),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('chromophore', models.CharField(blank=True, max_length=5, null=True)),
                ('seq', models.CharField(blank=True, help_text='Amino acid sequence (IPG ID is preferred)', max_length=1024, null=True, unique=True, validators=[proteins.validators.protein_sequence_validator], verbose_name='Sequence')),
                ('pdb', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=4), blank=True, null=True, size=None, verbose_name='Protein DataBank ID')),
                ('genbank', models.CharField(blank=True, help_text='NCBI Genbank Accession', max_length=12, null=True, unique=True, verbose_name='Genbank Accession')),
                ('uniprot', models.CharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator('[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}', 'Not a valid UniProt Accession')], verbose_name='UniProtKB Accession')),
                ('ipg_id', models.CharField(blank=True, help_text='Identical Protein Group ID at Pubmed', max_length=12, null=True, unique=True, verbose_name='IPG ID')),
                ('mw', models.FloatField(blank=True, help_text='Molecular Weight', null=True)),
                ('agg', models.CharField(blank=True, choices=[('m', 'Monomer'), ('d', 'Dimer'), ('td', 'Tandem dimer'), ('wd', 'Weak dimer'), ('t', 'Tetramer')], help_text='Oligomerization tendency', max_length=2)),
                ('switch_type', models.CharField(blank=True, choices=[('b', 'Basic'), ('pa', 'Photoactivatable'), ('ps', 'Photoswitchable'), ('pc', 'Photoconvertible'), ('t', 'Timer'), ('o', 'Multistate')], help_text='Photoswitching type (basic if none)', max_length=2, verbose_name='Type')),
                ('blurb', models.CharField(blank=True, help_text='Brief descriptive blurb', max_length=512)),
                ('FRET_partner', models.ManyToManyField(blank=True, through='proteins.FRETpair', to='proteins.Protein')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protein_author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProteinCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('private', models.BooleanField(default=False, help_text='Private collections can not be seen by or shared with other users', verbose_name='Private Collection')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collections', to=settings.AUTH_USER_MODEL, verbose_name='Protein Collection')),
                ('proteins', models.ManyToManyField(related_name='collection_memberships', to='proteins.Protein')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(default='default', max_length=64)),
                ('slug', models.SlugField(help_text='Unique slug for the state', max_length=128, unique=True)),
                ('is_dark', models.BooleanField(default=False, help_text='This state does not fluorescence', verbose_name='Dark State')),
                ('ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(900)])),
                ('em_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)])),
                ('ex_spectra', proteins.fields.SpectrumField(blank=True, help_text='List of [[wavelength, value],...] pairs', null=True)),
                ('em_spectra', proteins.fields.SpectrumField(blank=True, help_text='List of [[wavelength, value],...] pairs', null=True)),
                ('ext_coeff', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300000)], verbose_name='Extinction Coefficient')),
                ('qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Quantum Yield')),
                ('brightness', models.FloatField(blank=True, editable=False, null=True)),
                ('pka', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)], verbose_name='pKa')),
                ('maturation', models.FloatField(blank=True, help_text='Maturation time (min)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1600)])),
                ('lifetime', models.FloatField(blank=True, help_text='Lifetime (ns)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='state_author', to=settings.AUTH_USER_MODEL)),
                ('protein', models.ForeignKey(help_text='The protein to which this state belongs', on_delete=django.db.models.deletion.CASCADE, related_name='states', to='proteins.Protein')),
            ],
            options={
                'verbose_name': 'State',
            },
        ),
        migrations.CreateModel(
            name='StateTransition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('trans_wave', models.PositiveSmallIntegerField(blank=True, help_text='Wavelength required', null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)], verbose_name='Transition Wavelength')),
                ('from_state', models.ForeignKey(help_text='The initial state ', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_from', to='proteins.State', verbose_name='From state')),
                ('protein', models.ForeignKey(help_text='The protein that demonstrates this transition', on_delete=django.db.models.deletion.CASCADE, related_name='transitions', to='proteins.Protein', verbose_name='Protein Transitioning')),
                ('to_state', models.ForeignKey(help_text='The state after transition', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_to', to='proteins.State', verbose_name='To state')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='state',
            name='transitions',
            field=models.ManyToManyField(blank=True, related_name='transition_state', through='proteins.StateTransition', to='proteins.State', verbose_name='State Transitions'),
        ),
        migrations.AddField(
            model_name='state',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='state_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='protein',
            name='default_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_for', to='proteins.State'),
        ),
        migrations.AddField(
            model_name='protein',
            name='parent_organism',
            field=models.ForeignKey(blank=True, help_text='Organism from which the protein was engineered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proteins', to='proteins.Organism', verbose_name='Parental organism'),
        ),
        migrations.AddField(
            model_name='protein',
            name='primary_reference',
            field=models.ForeignKey(blank=True, help_text='Preferably the publication that introduced the protein', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_proteins', to='references.Reference', verbose_name='Primary Reference'),
        ),
        migrations.AddField(
            model_name='protein',
            name='references',
            field=models.ManyToManyField(blank=True, related_name='proteins', to='references.Reference'),
        ),
        migrations.AddField(
            model_name='protein',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protein_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mutation',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proteins', to='proteins.Protein', verbose_name='Parent Protein'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='acceptor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='FK_FRETacceptor_protein', to='proteins.Protein', verbose_name='acceptor'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fretpair_author', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='donor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='FK_FRETdonor_protein', to='proteins.Protein', verbose_name='donor'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='pair_references',
            field=models.ManyToManyField(blank=True, related_name='FK_FRETpair_reference', to='references.Reference'),
        ),
        migrations.AddField(
            model_name='fretpair',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fretpair_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bleachmeasurement',
            name='state',
            field=models.ForeignKey(help_text='The state on which this measurement was made', on_delete=django.db.models.deletion.CASCADE, related_name='bleach_measurements', to='proteins.State', verbose_name='Protein (state)'),
        ),
        migrations.AddField(
            model_name='bleachmeasurement',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bleachmeasurement_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='state',
            unique_together=set([('protein', 'ex_max', 'em_max', 'ext_coeff', 'qy')]),
        ),
        migrations.AlterUniqueTogether(
            name='proteincollection',
            unique_together=set([('owner', 'name')]),
        ),
    ]
